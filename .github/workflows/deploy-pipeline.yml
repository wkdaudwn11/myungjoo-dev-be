name: Deploy Pipeline

on:
  push:
    branches:
      - main

env:
  SLACK_API_URL: https://slack.com/api/chat.postMessage
  GITHUB_ACTIONS_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  COMMIT: ${{ github.sha }}
  MESSAGE: ${{ github.event.head_commit.message }}

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm run lint

      - name: Run TypeScript check
        run: pnpm run type-check

      - name: Run Tests
        run: pnpm run test:cov

      - name: Notify Slack (Test Failure)
        if: failure()
        run: |
          chmod +x .github/scripts/notify-slack.sh
          TEXT="테스트 실패! :x:"
          .github/scripts/notify-slack.sh "$TEXT" "$COMMIT" "$MESSAGE" "$GITHUB_ACTIONS_URL" ""

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH key
        run: echo "${{ secrets.SSH_KEY }}" > /tmp/my_key.pem && chmod 600 /tmp/my_key.pem
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/my_key.pem ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd ~/apps/myungjoo-dev-be
            git pull --ff-only origin main
            docker compose down
            docker compose build
            docker compose up -d
          EOF
        env:
          EC2_IP: ${{ secrets.SERVER_HOST }}

  release-drafter:
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success' && github.ref == 'refs/heads/main'

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run Release Drafter
        uses: release-drafter/release-drafter@v5.12.1
        with:
          config-name: release-drafter-config.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-slack:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Notify Slack (Deploy Result)
        run: |
          chmod +x .github/scripts/notify-slack.sh
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            TEXT="배포 성공! :white_check_mark:"
            SITE_URL="${{ secrets.SITE_DOMAIN }}"
          else
            TEXT="배포 실패! :x:"
            SITE_URL=""
          fi
          .github/scripts/notify-slack.sh "$TEXT" "$COMMIT" "$MESSAGE" "$GITHUB_ACTIONS_URL" "$SITE_URL"
        env:
          SLACK_API_URL: https://slack.com/api/chat.postMessage
          SLACK_BOT_USER_OAUTH_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_TOKEN }}
          SLACK_CHANNEL_NAME: ${{ secrets.SLACK_CHANNEL_NAME }}
